[{"/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/index.js":"1","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/reportWebVitals.js":"2","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/App.js":"3","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/socketConfig.js":"4","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/JoinForm.js":"5","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/CreateGame.js":"6","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/game/Game.js":"7","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/game/Lobby.js":"8","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/WelcomePage.js":"9","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/game/Canvas.js":"10"},{"size":500,"mtime":1610310815492,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1610310815497,"results":"13","hashOfConfig":"12"},{"size":1981,"mtime":1610390425228,"results":"14","hashOfConfig":"12"},{"size":227,"mtime":1619463882099,"results":"15","hashOfConfig":"12"},{"size":1483,"mtime":1610389710401,"results":"16","hashOfConfig":"12"},{"size":2174,"mtime":1610389668935,"results":"17","hashOfConfig":"12"},{"size":11469,"mtime":1619464707846,"results":"18","hashOfConfig":"12"},{"size":3349,"mtime":1611366718202,"results":"19","hashOfConfig":"12"},{"size":1184,"mtime":1619463882098,"results":"20","hashOfConfig":"12"},{"size":4624,"mtime":1619464507850,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"2z00b9",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/index.js",[],["46","47"],"/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/reportWebVitals.js",[],"/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/App.js",[],"/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/socketConfig.js",[],"/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/JoinForm.js",[],"/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/CreateGame.js",[],"/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/game/Game.js",["48","49"],"// Basic imports\nimport React, { Component } from \"react\";\nimport Sketch from \"react-p5\";\nimport socket from '../../socketConfig';\n\n// Material-UI imports\nimport BrushIcon from '@material-ui/icons/Brush';\nimport CheckIcon from '@material-ui/icons/Check';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\n\n// Constants for inital setup\nconst WIDTH = window.innerWidth;\nconst HEIGHT = 0.80 * window.innerHeight;\n\n// Constants for timer setup\nconst timerSeconds = 60;\nvar start = Date.now();\nvar sec = timerSeconds;\nvar second = timerSeconds;\n\nexport default class App extends Component {\n  // state for the whole game logic and dynamic rendering\n  state = {\n    players: [],\n    name: this.props.location.state.name,\n    numPlayers: 1,\n    maxPlayers: 0,\n    gameCode: this.props.location.state.id,\n    setUpArr: this.props.location.state.setup,\n    onTurn: false,\n    currentTurn: 0,\n    wordNumber: 0,\n    resetTimer: true,\n    correct: false,\n    correctArr: this.props.location.state.setup.correct,\n    guessedWord: '',\n    guessedWordSoFar: '',\n    list: this.props.location.state.initialList,\n    first: true\n  }\n\n  componentWillUnmount() {\n    this.setState = (state,callback)=>{\n        return;\n    };\n  }\n\n  // Display the initial headings of names\n  componentWillMount = () => {\n    this.updateList();\n  }\n\n  // Timer logic\n  componentDidMount = () => {\n    if(this.state.resetTimer){\n      start = Date.now();\n\n      setInterval(() => {\n        document.getElementById(\"timer\").innerHTML = second;\n        var delta = Date.now() - start;\n        second = sec - Math.floor(delta/1000);\n\n        // When timer resets:\n        if(second === -1){\n          console.log(\"reached\");\n\n          // Clear the board for all players\n          socket.emit('clearedCanvas', this.state.gameCode);\n          let resetCorrectArr = [];\n\n          for(var i = 0; i < this.state.correctArr.length; i++){\n            resetCorrectArr.push({name: this.state.setUpArr.names[i], correct: false});\n          }\n\n          // Everyone except the creator will have their names go back to default colour\n          this.setState({correctArr: resetCorrectArr}, this.updateList);\n\n          // If it's the last player's turn, reset the state, but make the first player the next player\n          if(this.state.currentTurn === this.state.setUpArr.names.length - 1){\n            this.setState({\n              currentTurn: 0,\n              wordNumber: this.state.wordNumber + 1,\n              resetTimer: true\n            }, this.updateList);\n          }else{\n\n            // Otherwise increment the current player by 1\n            this.setState({\n              currentTurn: this.state.currentTurn + 1,\n              wordNumber: this.state.wordNumber + 1,\n              resetTimer: true\n            }, this.updateList);\n          } \n\n          // Reset the clock back to 60 seconds\n          second = timerSeconds;\n          start = Date.now();\n        }\n      }, 100); \n    } \n  }\n\n  // Called everytime a player (guesser) hits a key stroke\n  onChange = (e) => {\n    \n    // set the state of the current guessed word and AFTER that, run check logic\n    this.setState({guessedWordSoFar: e.target.value}, () => {\n      \n      // If the player guessed right...\n      if(this.state.guessedWordSoFar.toLowerCase() === this.state.setUpArr.words[this.state.wordNumber]){\n        console.log(\"True\");\n        let newCorrectArr = [];\n        \n        // Create a new array with the player that guessed correct's status as 'correct'\n        for(var i = 0; i < this.state.correctArr.length; i++){\n          if(this.state.correctArr[i].name === this.state.name){\n            newCorrectArr.push({name: this.state.name, correct: true});\n          }else{\n            newCorrectArr.push(this.state.correctArr[i]);\n          }\n        } \n\n        // Send to the server the updated correct status array\n        socket.emit('guessedCorrect', this.state.gameCode, newCorrectArr);\n      }else{\n        this.setState({correct: false});\n      }\n    });\n  }\n \n  // p5.js logic for canvas - called only once at the start of the program\n  setup = (p5, parent) => {\n    var cnv = p5.createCanvas(WIDTH, HEIGHT).parent(parent);\n    p5.background(220,220,220);\n\n    // socket event listener for when a drawing is recieved\n    socket.on('drawing', (data) => {\n      p5.ellipse(data.x, data.y, 25, 25);\n      p5.noStroke();\n      p5.fill(0);\n    });\n\n    // socket event listener for when the board is cleared\n    socket.on('clearBoard', () => {\n      p5.clear();\n      p5.background(220,220,220);\n    });\n\n    // socket event listener for when a user guesses the correct word\n    socket.on('guessedRight', (arr) => {\n      let count = 0;\n      \n      // update the correct list once the new correct array has been set in state\n      this.setState({correctArr: arr}, this.updateList);\n      \n      for(var i = 0; i < arr.length; i++){\n        if(arr[i].correct){\n          count++;\n        }\n      }\n\n      console.log(\"How many correct\" + count);\n      console.log(arr.length);\n\n      // If all players guessed corret, then reset the board and move on to the next player\n      if(count === arr.length - 1){\n        setTimeout(() => {\n\n          // Clear the board\n          socket.emit('clearedCanvas', this.state.gameCode);\n          let resetCorrectArr = [];\n          \n          for(var i = 0; i < this.state.correctArr.length; i++){\n            resetCorrectArr.push({name: this.state.setUpArr.names[i], correct: false});\n          }\n          \n          this.setState({correctArr: resetCorrectArr}, this.updateList);\n          \n          // If it was the last players turn, reset state but make the first player the next turn\n          if(this.state.currentTurn === this.state.setUpArr.names.length - 1){\n            this.setState({\n              currentTurn: 0,\n              wordNumber: this.state.wordNumber + 1,\n              resetTimer: true\n            }, this.updateList);\n          }else{\n\n            // Otherwise make the next person in the array the new creator\n            this.setState({\n              currentTurn: this.state.currentTurn + 1,\n              wordNumber: this.state.wordNumber + 1,\n              resetTimer: true\n            }, this.updateList);\n          }  \n          \n          // reset timer\n          second = timerSeconds;\n          start = Date.now();\n        }, 500);\n      }\n    });\n  }\n    \n  draw = p5 => {\n  }\n\n  // p5.js integrated function called whenever a key is pressed\n  keyTyped = p5 => {\n    \n    // if the CREATOR presses 'c', clear the board for every user\n    if(p5.key === 'c' && this.state.setUpArr.names[this.state.currentTurn] === this.state.name){\n      socket.emit('clearedCanvas', this.state.gameCode);\n      p5.clear();\n      p5.background(220,220,220);\n    }\n  }\n\n  // Integrated p5.js function called when mouse is dragged on canvas\n  mouseDragged = p5 => {\n\n    // if and only if the creator is dragging the mouse, create a drawing and emit to server\n    if(this.state.setUpArr.names[this.state.currentTurn] === this.state.name){\n      p5.ellipse(p5.mouseX, p5.mouseY, 25, 25);\n      p5.noStroke();\n      p5.fill(0);\n      var positions = {\n        x: p5.mouseX,\n        y: p5.mouseY\n      }\n      socket.emit('mouse', positions, this.state.gameCode);\n    }\n  }\n\n  // Keep track of who guessed correct for dynamic styling\n  updateList = () => {\n    var tempList = [];\n    \n    // Return the styling for the header of each person in the array based on creator/correct status\n    for(var i = 0; i < this.state.setUpArr.names.length; i++){\n      if(i === this.state.currentTurn){\n        tempList.push(<div key={i}><h4 style={this.styleTable(this.state.setUpArr.names[i])}>{this.state.setUpArr.names[i]+' '}<BrushIcon style = {{marginBottom: '4px', marginLeft: '9px'}} /></h4></div>);\n      }else if(this.state.correctArr[i].correct){\n        console.log(this.state.correctArr[i].correct);\n        tempList.push(<div key={i}><h4 style={this.styleTable(this.state.setUpArr.names[i])}>{this.state.setUpArr.names[i]+' '}<CheckIcon style = {{marginBottom: '4px', marginLeft: '5px'}} /></h4></div>);\n      }else{\n        tempList.push(<div key={i}><h4 style={this.styleTable(this.state.setUpArr.names[i])}>{this.state.setUpArr.names[i]+' '}<HourglassEmptyIcon style = {{marginBottom: '4px', marginLeft: '5px'}} /></h4></div>);\n      }\n    }\n    this.setState({list: tempList});\n  }\n\n  // constant for styling the name headers\n  styleTable = (name) => {\n    let newStyles = {\n      backgroundColor: this.getColour(name),\n      padding: '10px',\n      margin: '10px',\n      borderRadius: '8px',\n      width: (WIDTH - (20 * (this.state.setUpArr.names.length + 1)) - 55)/ this.state.setUpArr.names.length,\n      textAlign: 'center',\n      float: 'left'\n    }\n\n    return newStyles;\n  }\n\n  // function to determine what colour the background of the header would be based on creator/correct status\n  getColour = (nameOfPlayer) => {\n    if(this.state.setUpArr.names[this.state.currentTurn] === nameOfPlayer){\n      return '#e6ed15';\n    }else{\n      for(var i = 0; i < this.state.correctArr.length; i++){\n        if(this.state.correctArr[i].name === nameOfPlayer){\n          if(this.state.correctArr[i].correct){\n            return '#1ae310';\n          }else{\n            return '#acb5ac';\n          }\n        }\n     }\n    }\n  }\n\n  // Main render method in React component\n  render() {\n\n    // Used for testing purposes (no impact on game for now)\n    const getCorrect = (name) => {\n      for(var i = 0; i < this.state.setUpArr.names.length; i++){\n        if(this.state.correctArr[i].name === name){\n          if(this.state.correctArr[i].correct){\n            return true;\n          }else{\n            return false;\n          }\n        }\n      }\n    }\n\n    // Constant for styling the form\n    const formStyle = {\n      display: 'inline-block',\n      position: 'absolute',\n      top: '94%',\n      left: '43%',\n      margin: 'auto'\n    }    \n\n    // If the player is the current painter, display the word to draw at the bottom\n    if(this.state.setUpArr.names[this.state.currentTurn] === this.state.name){\n      return(<div>\n              <div>\n                {this.state.list}\n                <span style={{userSelect: 'none', float: 'right', marginRight: '25px', marginTop: '13px', fontSize: '30px',fontFamily: 'Arial, Helvetica, sans-serif'}} id=\"timer\"></span>\n              </div>\n              <Sketch setup={this.setup} draw={this.draw} mouseDragged={this.mouseDragged} keyTyped={this.keyTyped}/>   \n              <h2 style={{textAlign:'center'}}>Your word to draw is: <b>{this.state.setUpArr.words[this.state.wordNumber]}</b></h2>\n            </div>);\n    }else{\n\n      // Otherwise, display a textbox to take input as guesses from players\n      return(<div>\n              <div>\n                {this.state.list}\n                <span style={{userSelect: 'none', float: 'right', marginRight: '25px', marginTop: '13px', fontSize: '30px',fontFamily: 'Arial, Helvetica, sans-serif'}} id=\"timer\"></span>\n              </div>\n              <Sketch setup={this.setup} draw={this.draw} mouseDragged={this.mouseDragged} keyTyped={this.keyTyped}/>   \n              <br></br>\n              <div style={formStyle} className=\"form-inline\">\n                <input onChange={this.onChange} style={{width: '230px'}} className=\"form-control\" aria-describedby=\"emailHelp\" placeholder=\"Enter word\" type=\"text\" />\n              </div>\n            </div>);\n    }\n  }\n}","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/game/Lobby.js",[],["50","51"],"/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/WelcomePage.js",["52"],"import { isWidthDown } from '@material-ui/core'\nimport React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport class WelcomePage extends Component {\n    render() {\n        //const WIDTH = window.innerWidth;\n        //const HEIGHT = window.innerHeight;\n        const firstBtn = {\n            textAlign: 'center',\n            display: 'block',\n            margin: '0 auto',\n            width: '13%',\n            marginBottom: '70px',\n            marginTop: '200px'\n        }\n        const secondBtn = {\n            textAlign: 'center',\n            display: 'block',\n            margin: '0 auto',\n            width: '13%'\n        }\n\n        return (\n            <div>\n                <h1 style={{textAlign: 'center', marginTop: '20px'}}>Welcome to Pictionary!</h1>\n                <h2 style={{textAlign: 'center', marginTop: '20px'}}>Made by Kirollos Botros</h2>\n                <Link to='/create-game' type=\"button\" style={firstBtn} className=\"btn btn-primary\">Create Game</Link>\n                <Link to ='/join-game' type=\"button\" style={secondBtn} className=\"btn btn-success\">Join Game</Link>\n            </div>\n        )\n    }\n}\n\nexport default WelcomePage","/Users/kirollosbotros/Desktop/University/Side Projects/Pictionary/frontend/src/pages/game/Canvas.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":133,"column":9,"nodeType":"59","messageId":"60","endLine":133,"endColumn":12},{"ruleId":"57","severity":1,"message":"61","line":288,"column":11,"nodeType":"59","messageId":"60","endLine":288,"endColumn":21},{"ruleId":"53","replacedBy":"62"},{"ruleId":"55","replacedBy":"63"},{"ruleId":"57","severity":1,"message":"64","line":1,"column":10,"nodeType":"59","messageId":"60","endLine":1,"endColumn":21},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'cnv' is assigned a value but never used.","Identifier","unusedVar","'getCorrect' is assigned a value but never used.",["65"],["66"],"'isWidthDown' is defined but never used.","no-global-assign","no-unsafe-negation"]